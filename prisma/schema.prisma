generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  email      String      @unique
  username   String
  shelves    Shelf[]
  books      UserBook[] // all books added by user 
  shelfBooks ShelfBook[] // books added by user to specific shelves
}

// UserBook contains metadata unique to relationship between this user and this book
model UserBook {
  userId  Int
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookId  String
  book    Book        @relation(fields: [bookId], references: [id])
  shelves ShelfBook[]

  dateAdded DateTime @default(now())
  updatedAt DateTime @updatedAt()
  status    String // 'completed', 'reading', 'plan-to-read'
  rating    Int? // 1-10 or null. Only 'completed' books have a rating.

  @@id([userId, bookId])
}

model Book {
  id        String   @id
  title     String
  thumbnail String? // url to cover img
  authors   String[]

  users UserBook[]
}

model ShelfBook {
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookId    String
  userBook  UserBook @relation(fields: [userId, bookId], references: [userId, bookId], onDelete: Cascade)
  shelfname String
  shelf     Shelf    @relation(fields: [userId, shelfname], references: [creatorId, shelfname], onDelete: Cascade)
  dateAdded DateTime @default(now()) // Date when this book was added to this shelf

  @@id([userId, shelfname, bookId])
}

model Shelf {
  shelfname  String
  createdAt  DateTime    @default(now())
  creatorId  Int
  creator    User        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  shelfBooks ShelfBook[]

  @@id([creatorId, shelfname])
}
